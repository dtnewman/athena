package main

import "fmt"
import "time"
import "math/rand"

/*  A basic hill climbing algorithm that looks at neighbors and then
*	goes to the neighbor at each step that most increases the objective
*	function
*	@param[in] current_solution The starting point
*	@param[in] evaluate The function to evaluate a solution. This function
*	takes in an slice of integers and evaluates it, returning a float64 score
*	@param[in] get_neighbors The function that takes a given solution (which is
*	an slice of integers) and returns a 2d slice containing all of that solution's
*	neighbors
*	@return Returns a slice containing the best solution as well as a float64 with
*	that solution's evaluated score
 */
func simulated_annealing(initial_solution []int, evaluate func([]int) float64,
	get_neighbors func([]int) [][]int) ([]int, float64) {
	current_solution := make([]int, len(initial_solution))
	copy(current_solution, initial_solution)

	var score float64
	highest_score := evaluate(current_solution)
	var highest_score_position int

	for {
		highest_score_position = -1
		neighbors := get_neighbors(current_solution)
		for i, value := range neighbors {
			score = evaluate(value)
			if score > highest_score {
				highest_score = score
				highest_score_position = i
			}
		}
		if highest_score_position < 0 {
			break
		} else {
			copy(current_solution, neighbors[highest_score_position])
		}
	}
	return current_solution, highest_score
}


// NOTE: functions below that are not found above can be found in sample_functions.go
func main() {
	rand.Seed(time.Now().Unix())

	// run the problem on our "simple" function, where we try take an array of values and try to set them to
	// values between 1 and 10, in order to maximize an objective function sum(x_i*i)
	fmt.Println("\nRUN ON SIMPLE FUNCTION")
	p := []int{2, 3, 5, 4, 1, 6}
	fmt.Println("p", p)

	best_solution, highest_score := hill_climb(p, simple_evaluation, simple_get_neighbors)
	fmt.Println("Simulated annealing results", best_solution, highest_score)
	
	// Run on a travelling salesman problem with cities in the file tsp_data.csv (40 cities)
	fmt.Println("RUN ON TSP")
	tsp_setup_data()
	p2 := make([]int, len(g_data))
	for i := 0; i < len(g_data); i++ {
		p2[i] = i
	}
	fmt.Println("Initial distance:", -tsp_evaluation(p2))
	best_solution, highest_score = hill_climb(p2, tsp_evaluation, tsp_get_neighbors)
	fmt.Println("Simulated annealing results):", -highest_score)
}
